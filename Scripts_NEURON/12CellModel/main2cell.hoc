{load_file("nrngui.hoc")}
{load_file("LAcells_template.hoc")}
{load_file("interneuron_template.hoc")}
{load_file("class_axoaxoniccell.hoc")}

dt = 0.05
steps_per_ms = 20
v_init = -70

tstop = 1000

objref pc, cellslist, cell[100], nil, nc, nc1
pc = new ParallelContext()

strdef FileLocationStr_InternalSynConns
FileLocationStr_InternalSynConns = "Syn_Matrix.txt"

objref Internalnclist, InternalSynList, CurrentRec
Internalnclist = new List()
InternalSynList = new List()
CurrentRec = new Vector()

NCELL = 2

cellslist = new List()

for (i = pc.id; i < NCELL; i+= pc.nhost){
	if (i < 2){
		cell = new Cell_C()
	}else{
		cell = new InterneuronCell()	
	}
	cellslist.append(cell)
	pc.set_gid2node(i, pc.id)
	
	nc = cell.connect2target(nil)   ///for gid_connect between gids
	nc.delay = 0
	nc.weight = 1
	pc.cell(i, nc)
}

/*
objref somaVclamp1
access cellslist.object(0).soma 
cellslist.object(0).soma somaVclamp1 = new SEClamp(0.5)
somaVclamp1.rs = .01 // Mohm:series resistance should be much smaller than input resistance of the cell
somaVclamp1.dur1 = 0
somaVclamp1.amp1 = -70
somaVclamp1.dur2 = tstop
somaVclamp1.amp2 = -70
somaVclamp1.dur3 = 0
somaVclamp1.amp3 = -70
*/

/*
objref somaVclamp2
access cellslist.object(1).soma 
somaVclamp2 = new VClamp(0.5)
somaVclamp2.dur[0] = 1000
somaVclamp2.amp[0] = -75

objref somaVclamp3
access cellslist.object(2).soma 
somaVclamp3 = new VClamp(0.5)
somaVclamp3.dur[0] = 1000
somaVclamp3.amp[0] = -75

objref somaVclamp4
access cellslist.object(3).soma
somaVclamp4 = new VClamp(0.5)
somaVclamp4.dur[0] = 1000
somaVclamp4.amp[0] = -75
*/


objref somaCurrent
cellslist.object(0) somaCurrent = new IClamp(0.9)
somaCurrent.dur = 100
somaCurrent.del = 2
somaCurrent.amp = 1.01



/*
PyrCurrent = new NetStim(0.5)
PyrCurrent.number = 5
PyrCurrent.start = 20
PyrCurrent.interval = 20

cellslist.object(2).soma PyrSyn = new Chn_Pyr(0.5)
PyrSyn.initW = 50
access cellslist.object(2).soma
Pyrnc = new NetCon(PyrCurrent, PyrSyn)
*/

{load_file("ConnectToPyr.hoc")}
{load_file("ConnectToITN.hoc")}
{load_file("ConnectToCHN.hoc")}

ChnToPyr(InternalSynList, Internalnclist, CurrentRec)
//PyrToPyr(InternalSynList, Internalnclist)
PyrToCHN( InternalSynList, Internalnclist)
	
objref tvec, idvec 										// will be Vectors that record all spike times (tvec)
														// and the corresponding id numbers of the cells that spiked (idvec)

proc spikerecord() {local i localobj nc, nil

	tvec = new Vector()
	idvec = new Vector()
	for i=0, cellslist.count-1 {
	  nc = cellslist.object(i).connect2target(nil)
	  nc.record(tvec, idvec, nc.srcgid)
														// the Vector will continue to record spike times even after the NetCon has been destroyed
	}
}

objref Volrec0, Volrec1, Volrec2, Volrec3, Volrec4, Volrec5, Volrec6, Volrec7, Volrec8, Volrec9, Volrec10,Volrec11
objref Currec0

Currec0 = new Vector()

Volrec0 = new Vector()
Volrec1 = new Vector()

//Currec0.record(&somaVclamp1.i)

Volrec0.record(&cellslist.object(0).axon.v(0.5))
Volrec1.record(&cellslist.object(1).axon.v(0.5))


objref tempmatrix
tempmatrix = new Matrix()
tempmatrix.resize(tstop/dt+1, 2)

objref tempmatrix_current
tempmatrix_current = new Matrix()
tempmatrix_current.resize(tstop/dt+1,1)

spikerecord()
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

tempmatrix.setcol(0,Volrec0)
tempmatrix.setcol(1,Volrec1)

tempmatrix_current.setcol(0,CurrentRec)


objref f_volt
strdef voltage

f_volt = new File()
sprint(voltage,"voltage") 
f_volt.wopen(voltage)
tempmatrix.fprint(0,f_volt, " %g")
f_volt.close()


objref f_current
strdef current

f_current = new File()
sprint(current,"current") 
f_current.wopen(current)
tempmatrix_current.fprint(0,f_current, " %g")
f_current.close()


////////////////////////////

// Report simulation results
// PROCEDURE TO SEND SPIKES TO A FILE "SPIKERASTER"---from PRC way-----------------------
objref spikefile
//sprint(fname,"%g/spikeraster",seed)
spikefile = new File("data")

if(pc.id==0){     //"wopen" once by node 0 to clear the contents of the file
spikefile.wopen()
spikefile.close()
}


proc spikefileout() { local i, rank
pc.barrier() // wait for all hosts to get to this point

for rank=0, pc.nhost-1 { // host 0 first, then 1, 2, etc.

if (rank==pc.id) {
for i=0, tvec.size-1 {
spikefile.aopen()                               //"aopen" to append data
spikefile.printf("%8.4f\t %d\n", tvec.x[i], idvec.x[i])
spikefile.close()
}
}
pc.barrier() // wait for all hosts to get to this point
}
}

spikefileout()
/*
objref f_current
proc Save_Curr() { local z
	if(pc.gid_exists(N_Pyramidal+N_PVBasket+2)){
		f_current = new File()
		sprint(current,"./current") 
		f_current.wopen(current)
		Currec0.printf(f_current)
		f_current.close()
	}
}

*/
{pc.runworker()}

{pc.done()}

